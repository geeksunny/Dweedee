#include "Router.h"

namespace dweedee {

////////////////////////////////////////////////////////////////
// Class : Result //////////////////////////////////////////////
////////////////////////////////////////////////////////////////

Result::Result(bool consumed, bool failed) : consumed_(consumed), failed_(failed) {
  //
}

bool Result::isConsumed() {
  return consumed_;
}

bool Result::isFailed() {
  return failed_;
}

bool Result::shouldBroadcast() {
  return !failed_ && !consumed_;
}

void Result::addMessage(MidiMessage *message) {
  Mapping::outputQueue->push(message);
}

////////////////////////////////////////////////////////////////
// Class : Filter //////////////////////////////////////////////
////////////////////////////////////////////////////////////////

Filter::Filter() {
  //
}

bool Filter::isPaused() {
  return paused_;
}

void Filter::setPaused(bool isPaused) {
  paused_ = isPaused;
}

////////////////////////////////////////////////////////////////
// Class : ChannelFilter ///////////////////////////////////////
////////////////////////////////////////////////////////////////

ChannelFilter::ChannelFilter() {
  //
}

Result ChannelFilter::process(dweedee::MidiMessage *message) {
  // todo
}

////////////////////////////////////////////////////////////////
// Class : ChordFilter /////////////////////////////////////////
////////////////////////////////////////////////////////////////

ChordFilter::ChordFilter() {
  //
}

Result ChordFilter::process(dweedee::MidiMessage *message) {
  // todo
}

////////////////////////////////////////////////////////////////
// Class : DelayFilter /////////////////////////////////////////
////////////////////////////////////////////////////////////////

DelayFilter::DelayFilter() {
  //
}

Result DelayFilter::process(dweedee::MidiMessage *message) {
  // todo
}

////////////////////////////////////////////////////////////////
// Class : MessageTypeFilter ///////////////////////////////////
////////////////////////////////////////////////////////////////

MessageTypeFilter::MessageTypeFilter() {
  //
}

Result MessageTypeFilter::process(dweedee::MidiMessage *message) {
  // todo
}

////////////////////////////////////////////////////////////////
// Class : TransposeFilter /////////////////////////////////////
////////////////////////////////////////////////////////////////

TransposeFilter::TransposeFilter() {
  //
}

Result TransposeFilter::process(dweedee::MidiMessage *message) {
  // todo
}

////////////////////////////////////////////////////////////////
// Class : VelocityFilter //////////////////////////////////////
////////////////////////////////////////////////////////////////

VelocityFilter::VelocityFilter() {
  //
}

Result VelocityFilter::process(dweedee::MidiMessage *message) {
  // todo
}

}